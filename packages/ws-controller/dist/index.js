"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const w=o=>{if(typeof o=="object"&&o!==null){if(typeof Object.getPrototypeOf=="function"){const e=Object.getPrototypeOf(o);return e===Object.prototype||e===null}return Object.prototype.toString.call(o)==="[object Object]"}return!1},l=(...o)=>o.reduce((e,t)=>{if(Array.isArray(t))throw new TypeError("Arguments provided to ts-deepmerge must be objects, not arrays.");return Object.keys(t).forEach(s=>{["__proto__","constructor","prototype"].includes(s)||(Array.isArray(e[s])&&Array.isArray(t[s])?e[s]=l.options.mergeArrays?l.options.uniqueArrayItems?Array.from(new Set(e[s].concat(t[s]))):[...e[s],...t[s]]:t[s]:w(e[s])&&w(t[s])?e[s]=l(e[s],t[s]):e[s]=t[s]===void 0?l.options.allowUndefinedOverrides?t[s]:e[s]:t[s])}),e},{}),g={allowUndefinedOverrides:!0,mergeArrays:!0,uniqueArrayItems:!0};l.options=g;l.withOptions=(o,...e)=>{l.options=Object.assign(Object.assign({},g),o);const t=l(...e);return l.options=g,t};class E extends Promise{constructor(e,t){let s,r;super((i,n)=>{e(i,n),s=i,r=n}),this.resolve=s,this.reject=r,this.cancelPromise=t}cancel(){var e,t;(e=this.reject)==null||e.call(this,"promise has been canceled"),(t=this.cancelPromise)==null||t.call(this)}}var c=(o=>(o.closed="closed",o.connecting="connecting",o.connected="connected",o.closing="closing",o))(c||{});class S{constructor(e){this.events={},e.forEach(t=>{Reflect.set(this.events,t,[])})}addEventListener(e,t){if(!Reflect.has(this.events,e))throw new Error(`event ${e} doesn't exist!`);this.events[e].includes(t)||this.events[e].push(t)}removeEventListener(e,t){if(!Reflect.has(this.events,e))throw new Error(`event ${e} doesn't exist!`);const s=this.events[e].indexOf(t);s!==-1&&this.events[e].splice(s,1)}dispatchEvent(e,t){if(!Reflect.has(this.events,e))throw new Error(`event ${e} doesn't exist!`);this.events[e].forEach(s=>s(t))}}function b({cb:o,retryCount:e,intervalTime:t,event:s}){let r=!1,i=!1,n=()=>{};const h=new Promise(async(u,f)=>{n=()=>{e=0,i=!0,r=!0;const d="Because of reason [user cancel], re-execute end";return console.warn(d),s(d),f(new Error(d))};const p=async()=>{try{const d=await o();r=!0,u(d)}catch(d){if(i)return;let m="";d instanceof Error?m=d.message:m=JSON.stringify(d);const v=`Because of reason [${m}], start re-execute on ${e}`;if(console.warn(v),s(v),e==0){const T=`Because of reason [${m}], re-execute end`;console.error(T),s(T),r=!0,f(d)}else e!==0&&(e>0&&e--,setTimeout(()=>{p()},t))}};p()});return{finished:r,promise:h,cancel:n}}function C(o){let e=r=>{};const t=new Promise((r,i)=>{e=(n="promise aborted")=>{i(new O(n))}});return{promise:Promise.race([o,t]),abort:e}}class O extends Error{constructor(e){super(e)}}class P{constructor({wsController:e,options:t}){this.sendTimer=null,this.reSendTimer=null,this.connectingXPromise=null,this.startTime=0,this.options={handleHeartbeatMsg:s=>!0,timeout:5e3,intervalTime:5e3,sendMsg:"---- heartbeat ----"},this.wsController=e,this.setOptions(t)}setOptions(e={}){this.options=l(this.options,e)}send(){const e=`heartbeat send message: ${this.options.sendMsg}`;this.wsController.events.dispatchEvent("log",e),this.startTime=new Date().getTime(),this.wsController.send(this.options.sendMsg),this.sendTimer&&clearTimeout(this.sendTimer),this.sendTimer=setTimeout(async()=>{this.wsController.connectStatus==c.connected&&await this.wsController._wsClose(),this.connectingXPromise=b({cb:()=>this.wsController._wsConnect({}),retryCount:-1,intervalTime:2e3,event:t=>this.wsController.events.dispatchEvent("log",t)})},this.options.timeout)}received(e){var i,n;if(!this.sendTimer||!((n=(i=this.options).handleHeartbeatMsg)==null?void 0:n.call(i,e)))return;let s=new Date().getTime();const r=`heartbeat started at ${this.startTime}, completed in ${s}', duration is ${(s-this.startTime)/1e3} seconds`;this.wsController.events.dispatchEvent("log",r),this.startTime=0,this.sendTimer&&(clearTimeout(this.sendTimer),this.sendTimer=null),this.reSendTimer||(this.reSendTimer=setTimeout(()=>{this.send(),this.reSendTimer&&clearTimeout(this.reSendTimer),this.reSendTimer=null},this.options.intervalTime))}clear(){this.sendTimer&&clearTimeout(this.sendTimer),this.sendTimer=null,this.reSendTimer&&clearTimeout(this.reSendTimer),this.reSendTimer=null,this.connectingXPromise&&this.connectingXPromise.cancel(),this.wsController.events.dispatchEvent("log","heartbeat was cleared out by user")}}let a=null;class _{constructor(e){this.options={address:"",connectTimeout:5e3,reconnectIntervalTime:2e3,retry:2,onOpened:function(){}},this._connectStatus=c.closed,this.closingCb={resovle:null,reject:null},this.pause=!1,this.connectingTimer=null,this.closingTimer=null,this.heartbeat=new P({wsController:this}),this.events=new S(["message","log","status"]),this.setOptions(e)}get connectStatus(){return this._connectStatus}set connectStatus(e){this._connectStatus=e,this.events.dispatchEvent("status",this._connectStatus)}setOptions({wsOptions:e,heartbeatOptions:t}){this.options=l(this.options,e??{}),this.heartbeat.setOptions(t)}_setSocketInstance(e){const t=this;return new Promise((s,r)=>{a=new WebSocket(e),a.onopen=function(i){var n,h;if(t.connectStatus==c.connecting){t.connectStatus=c.connected;const u="Websocket start success.";s({success:!0,message:u}),t.events.dispatchEvent("log",u),(h=(n=t.options).onOpened)==null||h.call(n,t),setTimeout(()=>{t.heartbeat.send()},1e3)}},a.onclose=function(i){var n,h;if(t.connectStatus==c.closing){t.connectStatus=c.closed;const u="Websocket closed success";(h=(n=t.closingCb)==null?void 0:n.resovle)==null||h.call(n,{success:!0,message:u}),t.events.dispatchEvent("log",u),t._clearClose()}},a.onerror=function(i){var n,h;if(t.connectStatus==c.connecting){t.connectStatus=c.closed;const u="Websocket start error";r(new Error(u)),t.events.dispatchEvent("log",u)}else t.connectStatus==c.closing&&(t.connectStatus=c.connecting,(h=(n=t.closingCb)==null?void 0:n.reject)==null||h.call(n,new Error(`Websocket close error: onerror:${i}`)),t._clearClose())},a.onmessage=function(i){t.heartbeat.received(i),!t.pause&&t.events.dispatchEvent("message",i)}})}async _wsConnect(e){return new Promise(async(t,s)=>{try{let r=l(this.options,e??{});if(this.connectStatus==c.connected){const n="Websocket already connected";return this.events.dispatchEvent("log",n),t({success:!0,message:n})}if(!r.address){const n="Websocket adress not exsit";throw this.events.dispatchEvent("log",n),new Error(n)}if(this.connectStatus!==c.closed){const n=`Websocket connect failed: connectStatus current is ${this.connectStatus} not closed`;throw new Error(n)}this.connectStatus=c.connecting;const i=C(this._setSocketInstance(r.address));this.connectingTimer=setTimeout(()=>{i.abort("Websocket connect timeout")},r.connectTimeout),await i.promise}catch(r){this.connectStatus=c.closed,a==null||a.close();let i=`${r}`;r instanceof Error&&(i=r.message);const n=`connect failed: ${i}`;this.events.dispatchEvent("log",n),s(new Error(n))}finally{this._clearConnect()}})}_clearConnect(){this.connectingTimer&&(clearTimeout(this.connectingTimer),this.connectingTimer=null)}async _wsClose(){return new Promise((e,t)=>{if(this.connectStatus==c.closed){const s="Websocket already closed";return this.events.dispatchEvent("log",s),e({success:!0,message:s})}if(this.connectStatus!==c.connected){const s=`Websocket close filed: connectStatus current is ${this.connectStatus} not in connected.`;return this.events.dispatchEvent("log",s),t(new Error(s))}this.closingCb.resovle=e,this.closingCb.reject=t,this.connectStatus=c.closing,a==null||a.close(),this.closingTimer=setTimeout(()=>{this.connectStatus=c.closed;const s="Websocket close were timeout so it forced shutdown";this.events.dispatchEvent("log",s),e({success:!0,message:s}),this._clearClose()},2e3)})}_clearClose(){this.closingCb.resovle=null,this.closingCb.reject=null,this.closingTimer&&(clearTimeout(this.closingTimer),this.closingTimer=null)}connect(e){return this.connectingXPromise=b({cb:()=>this._wsConnect(e),retryCount:3,intervalTime:0,event:t=>this.events.dispatchEvent("log",t)}),this.connectingXPromise.promise}async close(){var e,t;(e=this.connectingXPromise)!=null&&e.finished&&((t=this.connectingXPromise)==null||t.cancel()),this.heartbeat.clear(),await this._wsClose()}send(e){if(this.connectStatus!==c.connected){const t="Websocket send error: connectStatus not in connected status.";throw this.events.dispatchEvent("log",t),new Error(t)}a==null||a.send(e)}addEventListener(e,t){this.events.addEventListener(e,t)}removeEventListener(e,t){this.events.removeEventListener(e,t)}}exports.SocketStatus=c;exports.WsController=_;exports.XPromise=E;
